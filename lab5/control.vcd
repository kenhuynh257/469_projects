$date
	Sun Jun 05 20:38:22 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! stall $end
$var wire 1 " regWrite $end
$var wire 1 # regDst $end
$var wire 1 $ memtoReg $end
$var wire 1 % memWrite $end
$var wire 1 & memRead $end
$var wire 1 ' jr $end
$var wire 1 ( j $end
$var wire 6 ) instruction [5:0] $end
$var wire 1 * clk $end
$var wire 1 + branch $end
$var wire 1 , ALUSrc $end
$var wire 3 - ALUOp [2:0] $end
$scope module ctrl $end
$var wire 2 . twoBits [1:0] $end
$var wire 10 / tenBits [9:0] $end
$var wire 1 ! stall $end
$var wire 1 " regWrite $end
$var wire 1 # regDst $end
$var wire 1 $ memtoReg $end
$var wire 1 % memWrite $end
$var wire 1 & memRead $end
$var wire 1 ' jr $end
$var wire 1 ( j $end
$var wire 6 0 instruction [5:0] $end
$var wire 5 1 fiveBits [4:0] $end
$var wire 12 2 controlU [11:0] $end
$var wire 1 * clk $end
$var wire 1 + branch $end
$var wire 1 , ALUSrc $end
$var wire 3 3 ALUOp [2:0] $end
$var reg 12 4 notStall [11:0] $end
$scope module EXMEMreg $end
$var wire 2 5 data [1:0] $end
$var wire 1 * clk $end
$var reg 2 6 q [1:0] $end
$upscope $end
$scope module IDEXreg $end
$var wire 10 7 data [9:0] $end
$var wire 1 * clk $end
$var reg 10 8 q [9:0] $end
$upscope $end
$scope module MEMWBreg $end
$var wire 5 9 data [4:0] $end
$var wire 1 * clk $end
$var reg 5 : q [4:0] $end
$upscope $end
$scope module takecontrol $end
$var wire 6 ; instruction [5:0] $end
$var reg 3 < ALUOp [2:0] $end
$var reg 1 = ALUSrc $end
$var reg 1 > branch $end
$var reg 1 ? j $end
$var reg 1 @ jr $end
$var reg 1 A memRead $end
$var reg 1 B memWrite $end
$var reg 1 C memtoReg $end
$var reg 1 D regDst $end
$var reg 1 E regWrite $end
$upscope $end
$upscope $end
$scope module test $end
$var wire 3 F ALUOp [2:0] $end
$var wire 1 , ALUSrc $end
$var wire 1 + branch $end
$var wire 1 ( j $end
$var wire 1 ' jr $end
$var wire 1 & memRead $end
$var wire 1 % memWrite $end
$var wire 1 $ memtoReg $end
$var wire 1 # regDst $end
$var wire 1 " regWrite $end
$var reg 1 * clk $end
$var reg 6 G instruction [5:0] $end
$var reg 1 ! stall $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 G
b0x F
1E
1D
0C
0B
0A
0@
0?
0>
0=
b10 <
b0 ;
bx :
bx 9
bx 8
b1001000001 7
bx 6
bx 5
b100100000100 4
b0x 3
b100100000100 2
bx 1
b0 0
bx /
bx .
b0x -
x,
x+
1*
b0 )
0(
0'
x&
x%
x$
x#
x"
0!
$end
#10
0*
#20
1,
b1 9
b0 -
b0 3
b0 F
1#
b1001000001 /
b1001000001 8
1*
#30
b100100 )
b100100 0
b100100 ;
b100100 G
0*
#40
b1 5
0%
0&
0+
b1 1
b1 :
1*
#50
0*
#60
1"
0$
b1 .
b1 6
1*
#70
0*
#80
1*
#90
b1101100001 7
b110110000100 4
b11 <
b110110000100 2
1=
b1100 )
b1100 0
b1100 ;
b1100 G
0*
#100
b1 -
b1 3
b1 F
b1101100001 /
b1101100001 8
1*
#110
0*
#120
b1001000001 7
b100100000100 4
b10 <
b100100000100 2
0=
b100101 )
b100101 0
b100101 ;
b100101 G
1*
#130
0*
#140
b0 -
b0 3
b0 F
b1001000001 /
b1001000001 8
1*
#150
b1110100001 7
b111010000100 4
b101 <
b111010000100 2
1=
b1101 )
b1101 0
b1101 ;
b1101 G
0*
#160
0,
b1 -
b1 3
b1 F
b1110100001 /
b1110100001 8
1*
#170
0*
#180
b1001000001 7
b100100000100 4
b10 <
b100100000100 2
0=
b100110 )
b100110 0
b100110 ;
b100110 G
1*
#190
0*
#200
1,
b0 -
b0 3
b0 F
b1001000001 /
b1001000001 8
1*
#210
b1110000001 7
b111000000100 4
b100 <
b111000000100 2
1=
b1110 )
b1110 0
b1110 ;
b1110 G
0*
#220
0,
b1110000001 /
b1110000001 8
1*
#230
0*
#240
b0 7
b0 4
1!
1*
#250
0*
#260
b0 9
0#
b0 /
b0 8
1*
#270
b10 <
b100100000100 2
0=
b100000 )
b100000 0
b100000 ;
b100000 G
0*
#280
b0 5
b0 1
b0 :
1*
#290
0*
#300
0"
b0 .
b0 6
b0 <
b110000000100 2
1=
b1000 )
b1000 0
b1000 ;
b1000 G
1*
#310
0*
#320
1*
#330
b1100000001 7
b110000000100 4
0!
0*
#340
b1 9
1#
b1100000001 /
b1100000001 8
1*
#350
0*
#360
b1 5
b1 1
b1 :
1(
b1001000001 7
b100100000110 4
1?
b10 <
b100100000110 2
0=
b10 )
b10 0
b10 ;
b10 G
1*
#370
0*
#380
1,
1"
b1 .
b1 6
b1001000001 /
b1001000001 8
1*
#390
1'
0(
b100100000101 4
1@
b100100000101 2
0?
b1001 )
b1001 0
b1001 ;
b1001 G
0*
#400
1*
#410
0*
#420
0'
bx0001100x0 7
bx0001100x000 4
0@
b1 <
1>
0E
xC
bx0001100x000 2
xD
b111 )
b111 0
b111 ;
b111 G
1*
#430
0*
#440
0,
b100x0 9
b1 -
b1 3
b1 F
x#
bx0001100x0 /
bx0001100x0 8
1*
#450
0*
#460
bx0 5
1+
b100x0 1
b100x0 :
b0 7
b0 4
1!
1*
#470
0*
#480
b0 9
b0 -
b0 3
b0 F
0#
0"
x$
b0 /
b0 8
bx0 .
bx0 6
1*
#490
0*
